// Sudoku Solver

#include <iostream>
using namespace std;

void printSudoku(int sudoku[][9]) {
    for (int i = 0; i < 9; i++) {
        if(i % 3 == 0 && i != 0){
            cout << "******+*******+******" << endl;
        }
        for (int j = 0; j < 9; j++) {
            if(j % 3 == 0 && j != 0){
                cout << "| ";
            }
            cout << sudoku[i][j] <<" ";
        }
        cout << endl;
    }
}

bool isSafe(int sudoku[9][9], int row, int col, int dig){
    //// Vertical Condition
    for(int i=0; i<=8; i++){
        if(sudoku[i][col] == dig ){
            return false;
        }
    }
    //// Horizontal Condition
    for(int j=0; j<=8; j++){
        if(sudoku[row][j] == dig ){
            return false;
        }
    }
    //// 3x3 grid condition
    int startRow = (row/3) * 3;
    int startCol = (col/3) * 3;
    for(int i=startRow; i<=startRow; i++){
        for(int j=startCol; j<=startCol+2; j++){
            if(sudoku[i][j] == dig){
                return false;
            }
        }
    }
    return true;
}
bool sudokuSolver(int sudoku[9][9], int row, int col){

    if(row == 9){
        return true;
    }

    int nextRow = row;
    int nextCol = col + 1;
    if(col + 1 == 9){
        nextRow = row + 1;
        nextCol = 0;
    }

    if(sudoku[row][col] != 0){
       return sudokuSolver(sudoku, nextRow, nextCol);
    }

    for(int dig= 1; dig<= 9; dig++){
        if(isSafe(sudoku, row, col, dig)){
            sudoku[row][col] = dig;
            if(sudokuSolver(sudoku, nextRow, nextCol)){
                return true;
            }
            sudoku[row][col] = 0;
        }
    }
    return false;
}
int main() {
    int sudoku[9][9] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    if (sudokuSolver(sudoku, 0, 0)) {
        printSudoku(sudoku);
    } else {
        cout << "No solution exists" << endl;
    }

    return 0;
}
